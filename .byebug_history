exit
value
k
exit
{"#{k}" => value} if value[:name].present?
exit
{k: value} if value[:name].present?
k
exit
self.ingredients
self
next
k
next
k
next
k
next
ingredients
k
next
k
next
{k: value} if value[:name].present?
ingredients
exit
value[:name]
value
v
k
ingredients
ingredient
exit
k
value
exit
ingredient[:name].present?
ingredient[:name]
Ingredient.create(ingredient) if ingredient[:name].present?
ingredient
exit
ingredient.values[1]
ingredient.values
ingredient
continue
exit
@recipe.ingredients
(@recipe.ingredients.map {|ingred| ingred if ingred.name.present?}).compact
@recipe
exit
@recipe.ingredients.map {|ingred| ingred if ingred.name.present?}
@recipe.ingredients
@recipe
exit
params
exit
@recipe.ingredients.last.name.present?
@recipe.ingredients.last.present?
@recipe.ingredients.first.present?
@recipe.ingredients.first.presence?
@recipe.ingredients.first
@recipe.save
@recipe.ingredients.save
@recipe.ingredients
exit
@recipe.ingredients
exit
exi
@recipe.ingredients
@recipe
continue
@recipe
exit
params
recipe_params
@recipe
exit
params.require(:recipe).permit(:name,ingredients_attributes: [:name,:quantity])
params.require(:recipe).permit(:name,ingredient_attributes: [:name,:quantity])
params.require(:recipe).permit(:name,ingredients_attributes: [:name,:quantity])
params.require(:recipe).permit(:name,ingredients: [:name,:quantity])
params
recipe_params
@recipe
exit
params["recipe"][:ingredient_attributes]
params["recipe"]
params
continue
@recipes.count
@recipes
